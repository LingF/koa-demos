{"version":3,"sources":["../src/async.js"],"names":["readAsync","data","JSON","parse","console","log","name","init","fs","require","readFile","cb","err","readFileAsync","path","Promise","resolve","reject","then","catch","co","util","promisify"],"mappings":";;;;;;;;;;;sFA4DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACmBA,UAAU,gBAAV,CADnB;;AAAA;AACMC,gBADN;;;AAGEA,mBAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;;AAEAG,oBAAQC,GAAR,CAAYJ,KAAKK,IAAjB;;AALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,I;;;;;;;AA5Df;;AAEA,IAAMC,KAAKC,QAAQ,IAAR,CAAX;;AAEA;AACA;AACA,SAASC,QAAT,CAAkBC,EAAlB,EAAsB;AACpBH,KAAGE,QAAH,CAAY,gBAAZ,EAA8B,UAACE,GAAD,EAAMX,IAAN,EAAe;AAC3C,QAAIW,GAAJ,EAAS,OAAOD,GAAGC,GAAH,CAAP;AACTD,OAAG,IAAH,EAASV,IAAT;AACD,GAHD;AAID;;AAEDS,SAAS,UAACE,GAAD,EAAMX,IAAN,EAAe;AACtB,MAAI,CAACW,GAAL,EAAU;AACRX,WAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;;AAEAG,YAAQC,GAAR,CAAYJ,KAAKK,IAAjB;AACD;AACF,CAND;;AAQA;AACA;AACA,SAASO,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCT,OAAGE,QAAH,CAAYI,IAAZ,EAAkB,UAACF,GAAD,EAAMX,IAAN,EAAe;AAC/B,UAAIW,GAAJ,EAASK,OAAOL,GAAP,EAAT,KACKI,QAAQf,IAAR;AACN,KAHD;AAID,GALM,CAAP;AAMD;;AAEDY,cAAc,gBAAd,EACGK,IADH,CACQ,gBAAQ;AACZjB,SAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;;AAEAG,UAAQC,GAAR,CAAYJ,KAAKK,IAAjB;AACD,CALH,EAMGa,KANH,CAMS,eAAO;AACZf,UAAQC,GAAR,CAAYO,GAAZ;AACD,CARH;;AAUA;AACA;AACA;AACA,IAAMQ,KAAKX,QAAQ,IAAR,CAAX;AACA,IAAMY,OAAOZ,QAAQ,MAAR,CAAb;;AAEAW,4CAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACgBC,KAAKC,SAAL,CAAed,GAAGE,QAAlB,EAA4B,gBAA5B,CADhB;;AAAA;AACGT,cADH;;;AAGDA,iBAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;;AAEAG,kBAAQC,GAAR,CAAYJ,KAAKK,IAAjB;;AALC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAH;;AAQA;AACA;AACA,IAAMN,YAAYqB,KAAKC,SAAL,CAAed,GAAGE,QAAlB,CAAlB;;AAUAH","file":"async.js","sourcesContent":["// js 异步场景的演变\n\nconst fs = require('fs')\n\n// - 1 -\n// 回调函数\nfunction readFile(cb) {\n  fs.readFile('./package.json', (err, data) => {\n    if (err) return cb(err)\n    cb(null, data)\n  })\n}\n\nreadFile((err, data) => {\n  if (!err) {\n    data = JSON.parse(data)\n\n    console.log(data.name)\n  }\n})\n\n// - 2 -\n// Promise\nfunction readFileAsync(path) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, (err, data) => {\n      if (err) reject(err)\n      else resolve(data)\n    })\n  })\n}\n\nreadFileAsync('./package.json')\n  .then(data => {\n    data = JSON.parse(data)\n\n    console.log(data.name)\n  })\n  .catch(err => {\n    console.log(err)\n  })\n\n// - 3 -\n// co + Generator Function + Promise\n// 注：* 和 yield 比较适合用断点执行代码，而不简单地异步请求\nconst co = require('co')\nconst util = require('util')\n\nco(function *() {\n  let data = yield util.promisify(fs.readFile)('./package.json')\n\n  data = JSON.parse(data)\n\n  console.log(data.name)\n})\n\n// - 4 -\n// Async 统一世界\nconst readAsync = util.promisify(fs.readFile)\n\nasync function init() {\n  let data = await readAsync('./package.json')\n\n  data = JSON.parse(data)\n\n  console.log(data.name)\n}\n\ninit()"]}