{"version":3,"sources":["../src/iterator.js"],"names":["makeIterator","arr","i","length","gen","console","log","next","value","done"],"mappings":";;;;;;;;sDAiCUA,Y;;AAjCV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,SAAUA,YAAV,CAAuBC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACWC,WADX,GACe,CADf;;AAAA;AAAA,gBACkBA,IAAID,IAAIE,MAD1B;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAEUF,IAAIC,CAAJ,CAFV;;AAAA;AACkCA,aADlC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,IAAME,MAAMJ,aAAa,CAAC,IAAD,EAAO,IAAP,EAAa,KAAb,CAAb,CAAZ;;AAEAK,QAAQC,GAAR,CAAY,IAAZ,EAAkBF,IAAIG,IAAJ,GAAWC,KAA7B;AACAH,QAAQC,GAAR,CAAY,IAAZ,EAAkBF,IAAIG,IAAJ,GAAWC,KAA7B;AACAH,QAAQC,GAAR,CAAY,IAAZ,EAAkBF,IAAIG,IAAJ,GAAWC,KAA7B;AACAH,QAAQC,GAAR,CAAY,IAAZ,EAAkBF,IAAIG,IAAJ,GAAWE,IAA7B","file":"iterator.js","sourcesContent":["// 核心：生成器\n// 生成器的本质：迭代器\n// 迭代器：是一个协议，遵循这个协议所实现的都是迭代器对象\n\n// - 1 -\n// function makeIterator(arr) {\n//   let nextIndex = 0\n\n//   // 返回一个迭代器对象\n//   return {\n//     next: () => {\n//       // next() 方法返回的结果对象\n//       if (nextIndex < arr.length) {\n//         // done 迭代器是否完成\n//         return { value: arr[nextIndex++], done: false }\n//       } else {\n//         return { done: true }\n//       }\n//     }\n//   }\n// }\n\n// const it = makeIterator(['吃饭', '睡觉', '打豆豆'])\n\n// console.log('首先', it.next().value)\n// console.log('其次', it.next().value)\n// console.log('然后', it.next().value)\n// console.log('最后', it.next().done)\n\n\n// - 2 -\n// 通过生成器函数\n// 简化迭代器创建过程\nfunction *makeIterator(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    yield arr[i]\n  }\n}\n\nconst gen = makeIterator(['吃饭', '睡觉', '打豆豆'])\n\nconsole.log('首先', gen.next().value)\nconsole.log('其次', gen.next().value)\nconsole.log('然后', gen.next().value)\nconsole.log('最后', gen.next().done)\n\n\n"]}